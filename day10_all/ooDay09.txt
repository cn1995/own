第一天:
1)Hero:width,height,x,y,life,doubleFire,step(),moveTo(int x,int y)
2)Sky:width,height,x,y,speed,y1,step()
3)Bullet:width,height,x,y,speed,step()
4)Airplane:width,height,x,y,speed,step()
5)BigAirplane:width,height,x,y,speed,step()
6)Bee:width,height,x,y,xSpeed,ySpeed,awardType,step()
7)World:sky,hero,a1,a2,ba1,ba2,b1,b2,bt1,bt1
        action(){ 创建对象并访问成员来测试 }
		main(){ 创建World的对象，调用action()方法 }

第二天:
1)Hero、Sky、Bullet、Airplane、BigAirplane、Bee的构造方法
2)World:action(){ 创建对象并访问成员来测试 }

第三天:
1)将多个小敌机、大敌机、小蜜蜂、子弹，设计到4个数组中
2)设计超类FlyingObject，派生类继承超类
3)给超类FlyingObject设计两个构造方法来为不同的对象做初始化
  在派生类中调用超类的构造方法

第四天:
1)将小敌机、大敌机、小蜜蜂这3个数组设计到
  FlyingObject数组中，实现了向上造型
2)在6个派生类中重写step()方法
3)画窗口

第五天:
1)给所有类中的成员添加访问控制修饰符
2)给所有类添加图片属性
3)将窗口的宽和高设计为常量，适当地方做修改

第六天:
1)画对象
2)定时器

画对象的思路/步骤:
1)想画对象一定得去获取对象的图片
  所有对象都能获取图片，所以将获取图片行为设计为超类中
  每个对象获取图片的行为都是不一样的，设计为抽象方法
  -----------FlyingObject类中抽象方法getImage()
2)在派生类中重写getImage()时需要判断对象的状态，
  因为所有对象都有状态，将状态设计为常量存在超类中
  -----------FlyingObject类中常量LIFE、DEAD、REMOVE
3)在派生类中重写getImage()方法来获取不同的图片
  3.1)Sky重写，直接返回image
  3.2)Bullet重写，活着返回image，死了就删除
  3.3)Hero重写，活着返回images[0]和images[1]的切换
                死了则images[2]到images[5]轮换，5完了删除
  3.4)Airplane重写，活着返回images[0]
                    死了则images[1]到images[4]轮换，4完了删除
  3.5)BigAirplane重写，同Airplane
  3.6)Bee重写，同Airplane
4)前3步准备好图片后，可以画对象了
  每一个派生类都可以画对象，将画对象行为设计在超类中
  因为画对象的代码都是一样的，所以将画对象设计为普通方法
  -----------FlyingObject类中设计普通方法paintObject()
5)因为Sky天空得有两张图片，所以在Sky中重写paintObject()
  -----------Sky类中重写了paintObject()
6)在World类中调用paintObject()画对象即可
  frame.setVisible(true)时会尽快调用paint方法，
  paint()当前类中没有，在超类中有，只不过方法中什么也没画
  当觉得超类的行为不够时，派生类World中重写paint()
  -----------World类中重写paint()


第七天:
1.敌人入场
  1)在World类中添加nextOne()来创建敌人对象
  2)在World类的run()中调用enterAction()实现敌人入场
    enterAction()中:
	  2.1)调用nextOne()获取敌人对象，
	  2.2)将enemies数组扩容，将敌人放在数组最后一个元素上
2.飞行物移动:
  1)在FlyingObject超类中设计了抽象方法step()
    在所有派生类中重写step()实现每个飞行物的移动
  2)在World类的run()中调用stepAction()实现飞行物移动
    stepAction()中:
	  窗口中的每一个对象都调用step()
3.子弹入场:
  1)在Hero类中设计了shoot()发射子弹方法
  2)在World类的run()中调用shootAction()实现子弹入场
    shootAction()中:
	  2.1)调用英雄机的shoot()获取子弹对象
	  2.2)将bullets数组扩容，数组的追加
4.英雄机随着鼠标动:
  1)在Hero类中设计了moveTo(x,y)实现随着鼠标动
  2)在World类的action()的侦听器中重写了鼠标移动事件
    在重写的鼠标移动事件中:
	  2.1)获取鼠标的x和y坐标
	  2.2)调用Hero的moveTo()从而实现随着鼠标动
5.删除越界的飞行物
  1)在FlyingObject超类中设计了抽象outOfBounds()越界检查方法
    在派生类中重写outOfBounds()
  2)在World类的run()中调用outOfBoundsAction()实现删除越界飞行物
    outOfBoundsAction()中:
	  2.1)删除越界敌人+删除越界子弹
	      2.1.1)声明不越界数组
		  2.1.2)遍历数组，凡是不越界的就装到不越界数组中
		  2.1.3)将不越界数组复制到enemies或bullets数组中

第八天:
1.设计Enemy敌人接口，Airplane与BigAirplane实现接口
  设计Award奖励接口，Bee实现接口
2.子弹与敌人的碰撞:
  1)在FlyingObject超类中设计了hit(other)实现敌人与子弹的碰撞
    在FlyingObject超类中设计了goDead()实现对象去死
	在Hero类中设计了addLife()增命、addDoubleFire()增火力
  2)在World类的run()中调用bulletBangAction()实现子弹与敌人的碰撞
    bulletBangAction():
	  2.1)嵌套循环来获取每一个子弹与每一个敌人
	  2.2)判断是否撞上了，若撞上了:
	      2.2.1)子弹去死、敌人去死
		  2.2.2)判断被撞对象是敌人还是奖励
		          若是敌人则玩家增分，若是奖励则英雄机增命或增火力
3.画分和画命:
  1)在Hero中设计getLife()用于获取英雄机的命
  2)在World类的paint()中调用drawString()实现画分和画命


第九天:
1.英雄机与敌人的碰撞:
  1)借用FlyingObject中的hit()方法实现英雄机与敌人的碰撞检查
    借用FlyingObject中的goDead()方法实现对象去死
	在Hero中设计了subtractLife()减命、clearDoubleFire()清空火力值
  2)在World类的run()中调用heroBangAction()
    heroBangAction()中:
	  遍历所有敌人，检测是否与英雄机撞上了
	  若撞上了，则敌人去死，英雄机减命，英雄机清火力
2.检测游戏结束:
  1)借用Hero中的getLife()获取英雄机的命
  2)在World类的run()中调用checkGameOverAction()
    checkGameOverAction()中，判断当英雄机命数<=0时游戏结束
3.画状态:
  1)设置了START、RUNNING、PAUSE、GAME_OVER四个常量表示状态
    设置了启动图、暂停图、游戏结束图
  2)在paint()中实现在不同状态下画不同的图
  3)在run()中设置在运行状态下才执行一堆action()
    在mouseMoved()中设置在运行状态下英雄机才随着鼠标动
  4)重写mouseClicked()事件，设置启动变运行，游戏结束清理现场变启动
    修改checkGameOverAction()设置当游戏结束时修改状态为GAME_OVER
  5)重写mouseExited()鼠标移出，当运行状态时变为暂停状态
    重写mouseEntered()鼠标移入，当暂停状态时变为运行状态

回顾:
1.接口:
    引用类型、常量和抽象方法、不能被实例化
	需要被实现的，实现类: 必须重写所有抽象方法
	一个类可以实现多个接口，逗号分隔
	接口可以继承接口
2.多态:
  1)意义:行为的多态、对象的多态
  2)向上造型: 超类、所实现的接口
  3)强制类型转换，成功的条件的两点:
    3.1)引用所指向的对象，就是该类型
	3.2)引用所指向的对象，实现了该接口
  4)若不符合如上两个条件，则发生ClassCastException类型转换异常
    建议在强转之前先通过instanceof判断


笔记:
1.内存管理:由JVM管理的
  1)堆:
    1.1)存储所有new出来的对象(包括实例变量)
	1.2)垃圾:没有任何引用所指向的对象
	    垃圾回收器(GC)不定时到内存的堆中清扫垃圾
		回收的过程是透明的，不一定一发现垃圾就立刻回收
		调用System.gc()可以建议虚拟机尽快调度GC来回收
	1.3)内存泄漏:不再使用的内存没有被及时的回收
	    建议:对象不再使用时，及时将引用设置为null
	1.4)实例变量的生命周期:
	      创建对象时存在堆中，对象被回收时一并被回收
  2)栈:
    2.1)存储正在调用中的方法中的所有局部变量(包括参数)
	2.2)调用方法时在栈中为该方法分配一块对应的栈帧，
	    栈帧中包含方法的局部变量以及参数，
        方法调用结束时，栈帧被清除，局部变量一并被清除
	2.3)局部变量的生命周期:
	      调用方法时存在栈中，栈帧被清除时一并被清除
  3)方法区:
    3.1)存储.class字节码文件(包括方法、静态变量)
	3.2)方法只有一份，通过this来区分具体的对象
2.面向对象三大特征:
  1)封装:
    1.1)类:封装对象的属性和行为
	1.2)方法:封装特定的业务功能实现
	1.3)访问控制修饰符:封装访问的权限
  2)继承:
    2.1)作用:减少代码的重复，有利于代码的复用
    2.2)超类:所有派生类所共有的属性和行为
	    接口:部分派生类特共有的行为
	    派生类:派生类所特有的属性和行为
	2.3)单一继承、多接口实现，传递性
  3)多态:
    3.1)意义: 行为的多态、对象的多态
	3.2)向上造型、强制类型转换、instanceof
	3.3)多态的表现形式:
	    3.3.1)重写:依据对象来多态
		3.3.2)重载:依据参数来多态


3.面向对象课程安排:
  1)第一天:
    1.1)知识点:
	    1.1.1)什么是类？什么是对象？
		1.1.2)如何创建类？如何创建对象？如何访问成员？
	1.2)案例:
	    1.2.1)创建了6个对象类，外加World世界类
  2)第二天:
    1.1)知识点:
	    1.1.1)方法的重载:
		1.1.2)构造方法:
		1.1.3)this:
		1.1.4)补充:引用之间画等号、Null和NullPointerException
	1.2)案例:
	    1.2.1)创建6个对象类的构造方法
  3)第三天:
    1.1)知识点:
	    1.1.1)引用类型数组:
		1.1.2)继承、super
	1.2)案例:
	    1.2.1)将小敌机、大敌机、小蜜蜂、子弹对象添加到数组中
		1.2.2)设计6个对象类继承超类FlyingObject
  4)第四天:
    1.1)知识点:
	    1.1.1)向上造型:
		1.1.2)重写、重写与重载的区别
	1.2)案例:
	    1.2.1)将小敌机、大敌机、小蜜蜂数组向上造型到FlyingObject数组中
		1.2.2)重写step()
		1.2.3)画窗口
  5)第五天:
    1.1)知识点:
	    1.1.1)package和import
		1.1.2)访问控制修饰符
		1.1.3)static、final、static final常量
	1.2)案例:
	    1.2.1)将类中的所有成员添加访问控制修饰符
		1.2.2)给类中添加静态图片
		1.2.3)将窗口的宽和高设置为常量
  6)第六天:
    1.1)知识点:
	    1.1.1)抽象方法、抽象类
		1.1.2)成员内部类、匿名内部类
	1.2)案例: 
	    1.2.1)画对象
		1.2.2)定时器
  7)第七天:
    1.1)知识点:
	    1.1.1)无
	1.2)案例:
	    1.2.1)敌人入场
		1.2.2)飞行物移动
		1.2.3)子弹入场
		1.2.4)英雄机随着鼠标动
		1.2.5)删除越界的飞行物
  8)第八天:
    1.1)知识点:
	    1.1.1)接口
		1.1.2)多态:意义、向上造型、强转、instanceof
	1.2)案例:
	    1.2.1)子弹与敌人的碰撞
		1.2.2)画分和画命
  9)第九天:
    1.1)知识点:
	    1.1.1)内存管理:堆、栈、方法区
	1.2)案例:
	    1.2.1)英雄机与敌人的碰撞
		1.2.2)检测游戏结束
		1.2.3)画状态

练习:
1)保证程序的正常运行
2)完成今天的3个功能------------重做两次
  2.1)英雄机与敌人的碰撞
  2.2)检测游戏结束
  2.3)画状态


调试Debug:
1)当程序的运行结果与你所期望的结果不同时需要调试
2)掌握几个键: 先加断点
  2.1)F5:单步调试----------会进入到方法中
  2.2)F6:逐过程调试--------不会进入到方法中
  2.3)F7:跳出方法
  2.4)F8:跳到下一个断点，若后面没有断点了则调试结束
3)会看两个东西:
  3.1)变量
  3.2)监视(选中表达式，右键，Watch)




射击游戏:
1)创建6个对象类，外加World----创建对象测试
2)创建6个对象类的构造方法-----创建对象测试
3)将小敌机、大敌机、小蜜蜂、子弹装到4个数组中-----测试
4)创建超类FlyingObject，6个派生类继承---运行(结果一样)
5)将小敌机/大敌机/小蜜蜂数组合到FlyingObject数组中--测试
6)派生类重写step()-------------------------测试
7)准备图片(超类loadImage()，派生类调用)----static的
  窗口宽和高设置为常量WIDTH和HEIGHT，适当地方做修改
8)画对象:
  8.1)超类FlyingObject中设计抽象方法getImage()
  8.2)超类FlyingObject中设置对象生命周期(LIFE、DEAD、REMOVE)
  8.3)派生类中重写getImage()
  8.4)超类FlyingObject中设计普通方法paintObject()
  8.5)派生类Sky中重写paintObject()
  8.6)World类中重写paint()调用对象的paintObject()
9)定时器
10)敌人入场、飞行物移动、子弹入场、
   英雄机随着鼠标动、删除越界飞行物
11)设计Enemy接口，小敌机和大敌机实现接口
   设计Award接口，小蜜蜂实现接口
12)子弹与敌人的碰撞、画分和画命
13)英雄机与敌人的碰撞、检测游戏结束、画状态


扩展功能:--------本身功能独立完成
1)每个对象的speed可不可以不一样
2)英雄机爆破
3)大黄蜂，既是飞行物，也能得分，也能得奖励


求一组图形的最大面积:



abstract class Shape{ //图形
  protected double c; //周长
  public abstract double area(); //计算面积
}
class Circle extends Shape{ //圆形
  public double area(){
    return 0.0796*c*c;
  }
}
class Square extends Shape{ //方形
  public double area(){
    return 0.0625*c*c;
  }
}
class Six extends Shape{ //六边形
  public double area(){
    return 0.0721*c*c;
  }
}
















思路:
1)先写行为:
  1.1)获取图片
      1.1.1)超类抽象getImage()
	  1.1.2)派生类重写
  1.2)画对象
      1.2.1)超类普通paintObject()
	  1.2.2)Sky中重写paintObject()
2)页面调用:
  2.1)重写paint()方法









每个对象都能画图片-----------共有的(FlyingObject)




想画图片、一定得能够获取到图片
所有对象都能获取图片--------------共有的(FlyingObject)













类中包含:成员变量+方法

class Aoo{
  int a; //OK
  void show(){ //OK
    a = 5;
	System.out.println("Hello");
  }
}















高质量的代码:
  复用性好、维护性好、扩展性好、
  ......



































API-------------范传奇
适应老师的授课风格


















英雄机与敌人的碰撞:
1.行为:
  1)FlyingObject做了hit()
  2)

2.调用:----run



若英雄机与敌人撞上了:
1)敌人消失
2)英雄机减命、英雄机清空火力值
















System.out.println();
System.out.println(23);
System.out.println(45.7);
System.out.println('w');
System.out.println(true);
System.out.println("HelloWorld");








Object

















Airplane a = new Airplane();
a.x = 1;
a.y = 56;
a.step();-----------a.y=58

Airplane aa = new Airplane();
aa.x = 2;
aa.y = 88;
aa.step();----------aa.y=90























实例变量:
1)类中，方法外
2)有默认值
3)创建对象时存在堆中，对象被回收时一并被回收
局部变量:
1)方法中
2)没有默认值
3)调用方法时存在栈中，栈帧被清除时一并被清除









Aoo o = new Aoo();-------------a=0
o.show(6);---------------------b=6

class Aoo{
  int a;
  void show(int b){
    int c;
	System.out.println(a);
	System.out.println(b);
	System.out.println(c); //编译错误
  }
}
















垃圾回收器(GC)


























1.英雄机与敌人的碰撞
2.检测游戏的结束
3.画状态


留着-------1)不出界
           2)非删除的


活着的
死了的
删除的--------REMOVE




if(!e.outOfBounds() && !e.isRemove()){









